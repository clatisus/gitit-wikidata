# Contest Info

date: 2018.03.03 13:00-18:00

[practice link](http://codeforces.com/gym/101741)

# Solutions

## A. Three Arrays

**题目大意：** 有三个单调不降的数列$\{a_n\},\{b_n\},\{c_n\}$，长度分别为$1\le n_a,n_b,n_c\le 5\times10^5$. 给定正整数$d$，求三元组$(i,j,k)$，满足$1\le i\le n_a,1\le j\le n_b,1\le k\le n_c$，且$|a_i-b_j|\le d,|a_i-c_k|\le d,|b_j-c_k|\le d$，的数量。

**题解：**


## F GCD

**题目大意**：给你 $n$ 个 $10^{18}$ 以内的正整数，给定非负整数 $k\le\frac{n}{2}$，问删去不超过 $k$ 个数后，剩下的数的最大公约数最大能是多少。

**题解**：显然我们任取一个数，至少有 $\frac{n-k}{n}\ge\frac{1}{2}$ 的概率在最优的 $n-k$ 个数中。又有最终答案是这 $n-k$ 个数的最大公约数，所以如果我们取到了这样的数，那么答案一定在这个数的约数中，容易知道答案一定是这些约数中最大的，且能够整除 $n$ 个数中至少 $n-k$ 个的那个约数。假如我们取 $T$ 次，那么没有取到的概率小于等于 $(\frac{n-k}{n})^{T}$，当 $T$ 大于等于 $20$ 的时候错误率已经在百万分之一以下。

下面我们考虑取到一个数后如何对它进行分解。首先我们计算出 $10^{6}$ 以内的质数，并用它们来试除取到的这个数，设除剩下的数为 $x$，那么 $x$ 有如下几种情况：$1,p,p_{1}p_{2},p^{2}$。之后我们将 $x$ 与 $n$ 个数分别做 $gcd$，若得到了一个 $(1,x)$ 的整数，那么我们就可以完成对后两种情况的分解。若没有得到这样的整数，在 $x>1$ 时，我们直接将 $x$ 看做一个质因子。第二种情况显然没有问题，而对于第三四种情况，相当于 $p_{1}p_{2},p^{2}$ 在 $n$ 个数中要么不出现，要么整体出现（即不单独出现 $p_{1},p_{2},p$），故不论如何进行 $gcd$ 运算，它们都会同时出现/不出现，可以将它们看做一个质数。

下面考虑怎样求出每个约数能整除多少个数。暴力试除显然会 `T`，注意到对于 $n$ 个数中的每个数，能够整除它的是它与取到的数的 $gcd$ 的约数，于是我们可以用多维后缀和来统计，每一维代表一个质因子。具体实现时先把所有 $gcd$ 求出并加 $1$，然后从后往前累加即可。



## J Subsequence Sum Queries

**题目大意**：给你 $n$ 个数和 $q$ 次询问，每次询问一个区间，问这个区间中有多少子序列的和能被 $m$ 整除。

**题解**：定义 $f_{i}(x)=1+x^{a_{i}}$，对于一个询问 $[l,r]$，设 $g(x)=\prod_{i=l}^{r}f_{i}(x)$，那么显然答案为 $\sum_{i=0}^{\infty}[x^{mi}]g$。于是我们可以把这些多项式当做一个关于 $x^{m}$ 的循环多项式来处理，答案即为 $[x^{0}]g$。考虑到 `FFT` 的常数，我们暴力进行乘法，复杂度为 $\mathcal{O}(m^{2})$，特别地，进行关于 $f_{i}(x)$ 的乘法时，由于只有两项非 $0$，复杂度为 $\mathcal{O}(m)$。我们离线处理所有询问，采用分治的办法，处理到一个区间时，从中点往左、右分别做 $f_{i}$ 的后、前缀积，这部分的总时间复杂度为 $\mathcal{O}(nm\log n)$，对于跨过中点的询问，我们可以 $\mathcal{O}(m^{2})$ 求出答案，其它的则分别到左右子树中处理，这部分的总时间复杂度为 $\mathcal{O}(qm^{2})$。

复杂度 $\mathcal{O}(nm\log n+qm^{2})$。