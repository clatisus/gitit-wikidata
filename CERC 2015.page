# Contest Info

date: 2018.08.21 12:00-17:00

[practice link](https://cn.vjudge.net/contest/248667)

# Solutions

## A. ASCII Addition

签到题

## B. Book Borders 

**题目大意**：

给出若干个单词，总长度为$n\le5\times10^5$. 

对于$m\le[L,R]$，问如果一行只能容纳$m$个字符（同一行相邻单词之间要有一个空格），每行的第一个单词长度加一的和减去一是多少。

**题解**：

将单词排成一行（相邻单词之间恰有一个空格），预处理出每个位置属于哪个单词，以及每个单词的首字母位置和长度。

对于询问$m$，每次从当前行首字母向后跳$m$个字符，然后调整到该位置属于的单词的首字母去，$O(1)$.

因为答案的总行数不超过$\frac{n}{1} + \frac{n}{2} + \cdots + \frac{n}{n}$，时间复杂度为$O(n\log{n})$.

## D. Digit Division

签到题。

## E. Export Estimate

**题目大意**：给出一个简单边带权无向图，和若干个询问。每个询问给出阈值 $p$，要求把原图权值小于 $p$ 的边删掉，并且删掉孤立点，把度为 $2$ 的连接不同点的点缩掉，问图的点数和边数。

**题解**：我们把询问和原图边权从大到小排序，然后依次处理询问。每次先插入合法的边，然后统计度为 $2$ 的点个数 $\text{cnt}_2$ 和度为 $0$ 的孤立点个数 $\text{cnt}_0$，以及是一个简单环的连通块个数 $c$。我们计算答案的时候只需要把 $c - \text{cnt}_2 - \text{cnt}_0$ 加到答案里就行了。

## F. Frightful Formula

**题目大意**：给你一个 $n\times n$ 的矩阵 $F$，它的第一行和第一列已经给出。对于其它的格子，有 $F_{i,j}=aF_{i,j-1}+bF_{i-1,j}+c$，求 $F_{n,n}$。

**题解**：不妨将两维坐标都减一。容易证明：
$$
F_{n-1,n-1}=\sum_{i=1}^{n-1}{n-2+n-1-i\choose n-1-i}a^{n-1}b^{n-1-i}F_{i,0}+\sum_{i=1}^{n-1}{n-2+n-1-i\choose n-1-i}a^{n-1-i}b^{n-1}F_{0,i}+\sum_{i=0}^{n-2}\sum_{j=0}^{n-2}{i+j\choose i}a^{i}b^{j}c
$$
对于后面常数项的处理有两种方法：

- 容易看出是一个卷积形式，用拆系数 FFT 优化。
- 令 $G_{i,j}=F_{i,j}+\frac{c}{a+b-1}$，消去常数，需要注意处理 $a+b-1\equiv0\pmod{p}$ 的情况。（并不好处理）

时间复杂度 $\mathcal{O}(n\log n)$ 或 $\mathcal{O}(n)$。

## H. Hovering Hornet

简单几何题，求直线切割凸包的面积。

## J. Juice Junctions

**题目大意**：

给出一个无向图，点数$n\le3000$，边数$m\le4500$，每个点的度数不超过3，每条边的边权都是1，求$\sum_{i<j} MinCut(i,j)$.

**题解**：

首先每个连通块得单独做。

因为每个点的度数不超过$3$，因此最大流不超过$3$，`dinic`最多$3$次`bfs`就可以求出两个点之间的最小割，这一步是$O(n)$.

使用`Stoer-Wagner`算法可以$n-1$次`dinic`求出`Gomory-Hu tree`，到这里是$O(n^2)$.

有了这个树之后，两个点之间的最小割，就是树上路径中的最小瓶颈边，可以将边从大到小排序，然后用并查集再做一次合并，贡献是边权乘以两个连通块大小的乘积。

时间复杂度$O(n^2)​$.

## K. Kernel Knights

**题目大意**：$2n$ 个骑士，骑士 $i$ 向骑士 $f[i]$ 连一条有向边，保证对于 $\forall i \in [1, n], f[i]\in [n + 1, 2n]$，对于 $\forall i \in [n + 1, 2n], f[i]\in [1, n]$。让你输出一个骑士集合 $S$，使得集合内没有两个人有边相连，集合外的骑士均有从 $S$ 中指出的边。

**题解**：令 $S = \{1, 2, \dots, n\}$，那么有一些点没有被 $S$ 相连，那么我们把它加进 $S$，并且把它指向的在 $S$ 中的点 $u$ 删掉，同时删掉 $u$ 指出的边。用一个队列维护。

std solution:一开始 $S=\emptyset$，每次选一个没有入度的点加入集合，黑白染色。不断如此，最后会剩下一个偶环，选一边的即可。

# Dirt Replay

E: `-1` 没考虑孤立点

H: `-1` 排序 x y 写反了