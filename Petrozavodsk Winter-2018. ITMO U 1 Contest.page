# Contest Info

date: 2019.03.06 15:59-20:59

[practice link](http://opentrains.snarknews.info/~ejudge/team.cgi?contest_id=001512)

# Solutions


## C. Casino Cheating

**题目大意**：交互题。一开始对手手上有单位 $1$ 的巧克力，你手上为 $0$。操作 $n$ 轮，交替操作，从你开始。保证 $n$ 为奇数。你每次可以选择对手手上一块巧克力，选择一个 $x(\frac{1}{3}\le x\le \frac{2}{3})$，你获得那块巧克力的 $x$ 倍，对手剩下 $1-x$ 倍。

对手每次等概率从你手上选择一块巧克力，然后选择 $x=\frac{2}{3}$。要求你最后手上的巧克力总和大于 $0.55$。

**题解**：如果 $n=1$，那么直接选 $x=\frac{2}{3}$。下面考虑 $n\ge 3$。如果你每次贪心的拿对方最大块的 $\frac{2}{3}$，那么你最后大概可以得到 $\frac{1}{2}$（模拟一下可以得到？）。

第一次拿 $\frac{1}{3}$，然后最后一次拿一开始剩余的 $\frac{2}{3}$ 的 $\frac{2}{3}$，那么你至少可以有 $\frac{4}{9}$。对方的第一次会拿取你手上 $\frac{1}{3}$ 的 $\frac{2}{3}$，也就是 $\frac{2}{9}$。你对 $\frac{2}{9}$ 采用上述的贪心策略，大概可以得到 $\frac{1}{9}$。那么总的就是 $\frac{5}{9}\approx 0.5556 > 0.55$。

## G. Game of Chairs

**题目大意**：给出一个序列$a_i$，$1\le a_i\le c$。选择一个位置$i$，然后会随机选择一个整数$k\in[1,c]$，代价是距离$i$最近的该整数位置的距离，最小化代价的期望。

**题解**：每种数字独立，考虑相邻的两个位置，中点左边由左边的点贡献，右边由右边的点贡献（两端单独处理），对于每个位置$x$维护一下$Ax+B$即可，通过查分和前缀和可以做到$O(n)$。

## H. Hung Fu

**题目大意**：给定长度为 $n$ 的正整数数组 $a, b$。求一个排列 $p$，最小化：

$$
\sum_{i=1}^n \text{min}_{1\le j\le i}a_{p_i}\oplus b_{p_j}
$$

最小值相同的时候，要求排列字典序最小。

**题解**：我们先求出最小值。观察式子可以发现，每个 $p_i$，我们需要找到一个 $p_j$ 满足 $j\le i$，如果不考虑取等的情况，这让我们想到了树。建有向图，枚举所有的有向边 $j\rightarrow i$，边权为 $b_j\oplus a_i$。考虑取等的情况，我们新建一个结点作为根，连接有向边 $\text{root}\rightarrow i$，边权为 $b_i\oplus a_i$。求最小树形图，即得到了最小值。

要使得方案最小，我们从左往右枚举排列的每个位置，每种取值，然后 check 当前的图能否达到最小值即可。一次 check 的复杂度为 $\mathcal{O}(n^2\log n)$，总复杂度 $\mathcal{O}(n^4\log n)$。

## J. Journey

**题目大意**：长度为 $n$ 的数列 $a_i$，满足 $a_i\in [1, n)$。你一开始站在位置 $1$，手上拿着数 $h_1(h_1\in [1, n))$。假设位置 $i$，手上拿的数是 $h_i$，那么你可以跳到 $i+h_i$ 或者 $i+a_i$。$h_i$ 等于上一跳的距离。求 $1$ 到 $n$ 的方案数。

**题解**：题意可以理解为在位置 $i$ 可以跳到位置 $j=i+k\cdot a_i(k\ge 1, a_j\neq a_i)$。从后往前计算方案数。初始值 $f_n=1$。将 $a_n$ 设置为 $-1$。

那么 $\displaystyle f_i = \sum_{k = 1, j = i + k\cdot a_i}^{j\le n} f_j\cdot [a_j\neq a_i]$。从后往前计算。对 $a_i$ 大小分块，如果 $a_i \ge \sqrt n$，我们直接暴力枚举 $k$ 即可。

记录 $\text{sum}[i][j]$ 表示下标模 $i$ 余 $j$ 的位置的和。如果 $a_i< \sqrt n$，那么答案为 $\text{sum}[a_i][i\bmod a_i]$。更新的时候对 $\forall j, j\neq a_i$（通过 $a_i$ 跳过来的时候不被贡献），更新 $\text{sum}[j][i\bmod j]$ 即可。