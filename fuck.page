```c++
#include <bits/stdc++.h>

const int BIT = 30;
typedef long long ll;

ll dp[BIT + 1][2][2][3][3];

void solve(){
    memset(dp, 0, sizeof(dp));
    int a, b, c;
    scanf("%d%d%d", &a, &b, &c);
    dp[BIT][0][0][1][1] = 1;
    for (int i = BIT - 1; i >= 0; -- i){
        for (int aSmall = 0; aSmall <= 1; ++ aSmall){
            for (int bSmall = 0; bSmall <= 1; ++ bSmall){
                for (int ctype = 0; ctype <= 2; ++ ctype) {
                    for (int ctype2 = 0; ctype2 <= 2; ++ ctype2) {
                        for (int aValue = 0; aValue <= 1; ++aValue) {
                            for (int bValue = 0; bValue <= 1; ++bValue) {
                                int abit = a >> i & 1;
                                int bbit = b >> i & 1;
                                if (!aSmall && aValue > abit || !bSmall && bValue > bbit) {
                                    continue;
                                }
                                int naSmall = aSmall, nbSmall = bSmall;
                                if (!aSmall && aValue < abit) {
                                    naSmall = 1;
                                }
                                if (!bSmall && bValue < bbit) {
                                    nbSmall = 1;
                                }
                                int cbit = c >> i & 1;
                                int cValue1 = aValue & bValue;
                                int nctype = ctype;
                                if (ctype == 1 && cValue1 != cbit){
                                    nctype = cValue1 < cbit ? 0 : 2;
                                }
                                int cValue2 = aValue ^ bValue;
                                int nctype2 = ctype;
                                if (ctype == 1 && cValue2 != cbit){
                                    nctype2 = cValue2 < cbit ? 0 : 2;
                                }
                                dp[i][naSmall][nbSmall][nctype][nctype2] += dp[i + 1][aSmall][bSmall][ctype][ctype2];
                            }
                        }
                    }
                }
            }
        }
    }
    ll ans = 0;
    for (int i = 0; i <= 1; ++ i){
        for (int j = 0; j <= 1; ++ j){
            for (int u = 0; u <= 2; ++ u){
                for (int v = 0; v <= 2; ++ v){
                    if (u == 2 || v == 0){
                        ans += dp[0][i][j][u][v];
                    }
                }
            }
        }
    }
    ans -= std::min(b, c - 1);
    ans -= 1;
    ans -= std::min(a, c - 1);
    printf("%lld\n", ans);
}

int main(){
    int test;
    scanf("%d", &test);
    while (test --){
        solve();
    }
    return 0;
}
```