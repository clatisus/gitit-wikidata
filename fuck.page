```
#include <bits/stdc++.h>

const int moder = (int) 1e9 + 7;

int powermod(int a, int exp){
    int ret = 1;
    for ( ; exp > 0; exp >>= 1){
        if (exp & 1){
            ret = 1ll * ret * a % moder;
        }
        a = 1ll * a * a % moder;
    }
    return ret;
}

std::vector <int> interpolation(std::vector <int> x, std::vector <int> y){
    int n = int(x.size()) - 1;
    std::vector <int> dp(n + 2);
    dp[0] = 1;
    for (int i = 0; i <= n; ++ i){
        for (int j = i + 1; j >= 0; -- j){
            dp[j] = (1ll * dp[j] * -x[i] + (j ? dp[j - 1] : 0)) % moder;
        }
    }
    std::vector <int> ret(n + 1);
    for (int i = 0; i <= n; ++ i){
        int coe = 1, coe1 = 0;
        for (int j = 0; j <= n; ++ j){
            if (i != j) coe = 1ll * coe * (x[i] - x[j]) % moder;
        }
        coe = 1ll * powermod(coe, moder - 2) * y[i] % moder;
        for (int j = n; j >= 0; -- j){
            coe1 = (dp[j + 1] + 1ll * coe1 * x[i]) % moder;
            ret[j] = (ret[j] + 1ll * coe * coe1) % moder;
        }
    }
    for (int i = 0; i <= n; ++ i){
        ret[i] += ret[i] < 0 ? moder : 0;
    }
    return ret;
}

int ask(int x){
    printf("ask %d\n", x);
    fflush(stdout);
    int value;
    scanf("%d", &value);
    return value;
    //return (x + 5) % moder;
}

int main(){
    srand((unsigned) time(nullptr));
    std::set <int> asked;
    std::vector <int> xvec, yvec;
    std::vector <int> ret;
    while (true){
        int x;
        while (true){
            using ll = long long;
            x = ((ll) rand() << 15 | rand()) % moder;
            if (!asked.count(x)){
                asked.insert(x);
                break;
            }
        }
        xvec.push_back(x);
        yvec.push_back(ask(x));
        ret = interpolation(xvec, yvec);
        int sz = ret.size();
        if (sz >= 2){
            if (ret[sz - 2] == 0 && ret[sz - 1] == 0){
                break;
            }
        }
    }
    printf("degree %d\n", (int) ret.size() - 3);
    return 0;
}
```