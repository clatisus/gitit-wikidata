```c++
#include <bits/stdc++.h>

const int N = 100010;
const int M = 60;

int type[N], x[N], y[N], z[N];
std::set <int> set[M][M];

int main(){
    int n, m, h;
    scanf("%d%d%d", &n, &m, &h);
    int q;
    scanf("%d", &q);
    for (int i = 0; i < q; ++ i){
        scanf("%d%d%d%d", &type[i], &x[i], &y[i], &z[i]);
        -- x[i], -- y[i], -- z[i];
    }
    bool flag1 = false, flag2 = false, flag3 = false;
    if (n > m){
        flag1 = true;
        std::swap(n, m);
    }
    if (m > h){
        flag2 = true;
        std::swap(m, h);
    }
    if (n > h){
        flag3 = true;
        std::swap(n, h);
    }
    for (int i = 0; i < q; ++ i){
        if (flag1){
            std::swap(x[i], y[i]);
        }
        if (flag2){
            std::swap(y[i], z[i]);
        }
        if (flag3){
            std::swap(x[i], z[i]);
        }
    }
    if (n * m <= 50){
        for (int _ = 0; _ < q; ++ _){
            if (type[_] == 1){
                set[x[_]][y[_]].insert(z[_]);
            }
            else{
                int ans = INT_MAX;
                for (int i = 0; i < n; ++ i){
                    for (int j = 0; j < m; ++ j){
                        if (set[i][j].empty()){
                            continue;
                        }
                        auto u = set[i][j].lower_bound(z[_]);
                        if (u != set[i][j].end()){
                            ans = std::min(ans, *u - z[_] + std::abs(x[_] - i) + std::abs(y[_] - j));
                        }
                        if (u != set[i][j].begin()){
                            -- u;
                            ans = std::min(ans, *u - z[_] + std::abs(x[_] - i) + std::abs(y[_] - j));
                        }
                    }
                }
                printf("%d\n", ans);
            }
        }
    }
    else{
        std::vector <std::vector <std::vector <int>>> ans(n);
        for (int i = 0; i < n; ++ i) {
            ans[i].resize(m);
            for (int j = 0; j < m; ++ j){
                ans[i][j].resize(h, INT_MAX);
            }
        }
        for (int _ = 0; _ < q; ++ _){
            if (type[_] == 1){
                for (int i = 0; i < n; ++ i){
                    for (int j = 0; j < m; ++ j){
                        int &u = ans[i][j][z[_]];
                        u = std::min(u, std::abs(i - x[_]) + std::abs(j - y[_]));
                    }
                }
            }
            else{
                int aans = INT_MAX;
                for (int k = 0; k < h; ++ k){
                    aans = std::min(aans, std::abs(z[_] - k) + ans[x[_]][y[_]][k]);
                }
                printf("%d\n", aans);
            }
        }
    }
    return 0;
}

```