```c++
#include <bits/stdc++.h>

typedef unsigned long long ull;
const int BIT = 19;
const int MAX = 1 << 19;
const int moder = (int) 1e9 + 7;

int lowPre[MAX];
std::vector <ull> cnts[MAX];
bool vis[MAX];

int bf(ull n, ull m){
    int ans = 0;
    for (ull i = 0; i <= n; ++ i){
        ans = (ans + ((i * m) & m)) % moder;
    }
    return ans;
}

int main(){
    ull n, m;
    scanf("%llu%llu", &n, &m);
    for (int i = 1; i < MAX; ++ i){
        lowPre[i] = (lowPre[i - 1] + (((ull) i * m) & (MAX - 1) & m)) % moder;
    }
    int ans1 = ((n / MAX) % moder * lowPre[MAX - 1] + lowPre[n % MAX]) % moder;
    for (int i = 0; i < MAX; ++ i){
        cnts[((i * m) / MAX) & (MAX - 1)].push_back(n / MAX + (n % MAX >= i));
    }
    int ans2 = 0;
    for (int i = 0; i < MAX; ++ i){
        if (vis[i]){
            continue;
        }
        int x = i;
        std::vector <int> vec;
        while (true){
            vec.push_back(x);
            vis[x] = true;
            x = (x + m) & (MAX - 1);
            if (vis[x]){
                break;
            }
        }
        int sz = vec.size();
        std::vector <int> pre(sz);
        for (int j = 0; j < sz; ++ j){
            pre[j] = ((j ? pre[j - 1] : 0) + (vec[j] & (m / MAX))) % moder;
        }
        for (int j = 0; j < sz; ++ j){
            for (auto u : cnts[vec[j]]){
                ans2 = (ans2 - (j ? pre[j - 1] : 0)) % moder;
                ull len = u + j - 1;
                ans2 = (ans2 + 1ll * pre[sz - 1] * ((len / sz) % moder) + pre[len % sz]) % moder;
            }
        }
    }
    int ans = (ans1 + 1ll * MAX * ans2) % moder;
    printf("%d\n", ans);
    printf("%d\n", bf(n, m));
}

```