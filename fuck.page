```c++
//
// Created by zzh on 2019/8/8.
//

#include <bits/stdc++.h>

const int max_N = (int)4e5 + 21;

int n, opt[2][233], L[max_N], R[max_N];

int x[max_N], y[max_N];

void gen(int* num, int *opt) {
    num[1] = opt[0];
    num[2] = opt[1];
    for (int i = 3; i <= n; ++i) {
        num[i] = (1LL * opt[2] * num[i - 1] + 1LL * opt[3] * num[i - 2] + opt[4]) % opt[5];
    }
}

std::set<int> set;

int tot, st[max_N * 4];

using LL = long long;

int cnt[max_N * 16];

LL sum[max_N * 16];

#define ls(x) ((x) << 1)
#define rs(x) (ls(x) | 1)
#define mid ((l + r) >> 1)
#define lch ls(x), l, mid
#define rch rs(x), mid + 1, r

int ql, qr;

void modify(int x = 1, int l = 1, int r = tot) {
    if (ql <= l && r <= qr) {
        ++cnt[x];
        sum[x] += st[r + 1] - st[l];
    } else {
        if (ql <= mid) modify(lch);
        if (qr >  mid) modify(rch);
        sum[x] = sum[ls(x)] + sum[rs(x)] + 1LL * cnt[x] * (st[r + 1] - st[l]);
    }
}

void query() {
    LL total = sum[1];
    int x = 1, l = 1, r = tot;
    LL count = 0;
    LL k = (total + 1) / 2;
    while (l < r) {
        count += cnt[x];
        LL left_s = sum[ls(x)] + count * (st[mid + 1] - st[l]);
        if (left_s < k) {
            k -= left_s;
            x = rs(x);
            l = mid + 1;
        } else {
            x = ls(x);
            r = mid;
        }
    }
    count += cnt[x];
    int offset = (k + count- 1) / count;
    printf("%d\n", st[l] + offset - 1);
}

int main() {
    scanf("%d", &n);
    for (int i = 0; i < 2; ++i) {
        for (int j = 0; j < 6; ++j) {
            scanf("%d", opt[i] + j);
        }
    }
    gen(x, opt[0]);
    gen(y, opt[1]);
    for (int i = 1; i <= n; ++i) {
        L[i] = std::min(x[i], y[i]);
        R[i] = std::max(x[i], y[i]);
        set.insert(L[i]);
        set.insert(R[i]);
    }
    set.insert(1);
    set.insert(1e9);
    for (const auto& x : set) {
        st[++tot] = x;
    }
    for (int i = 1; i <= n; ++i) {
        ql = std::lower_bound(st + 1, st + 1 + tot, L[i]) - st;
        qr = std::lower_bound(st + 1, st + 1 + tot, R[i]) - st;
        modify();
        query();
    }
}
```