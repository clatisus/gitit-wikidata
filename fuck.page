```c++
#include <bits/stdc++.h>

using std::string;

void readInt(int &x) {
    int c;
    while (!isdigit(c = getchar()));
    x = c - '0';
    while (isdigit(c = getchar())) {
        x = x * 10 + c - '0';
    }
}

const int max_M = 1000 + 21;
const int max_N = max_M * max_M;
const int log_N = 21;

int h, w, n, p[max_N];

std::vector<int> vec[max_N];

inline void add_edge(int u, int v) {
    vec[u].push_back(v);
    vec[v].push_back(u);
}

inline int get_id(int x, int y) {
    return (x - 1) * w + y;
}

string readLine() {
    string ret;
    for (int i = 1; i <= 2 * w + 1; ++i) {
        ret += getchar();
    }
    getchar();
    return ret;
}

int anc[log_N][max_N], dep[max_N];

void dfs(int u) {
    for (int i = 1; i < log_N; ++i) {
        anc[i][u] = anc[i - 1][anc[i - 1][u]];
    }
    for (auto &v : vec[u]) {
        if (v == anc[0][u]) continue;
        anc[0][v] = u;
        dep[v] = dep[u] + 1;
        dfs(v);
    }
}

int lca(int u, int v) {
    if (dep[u] > dep[v]) {
        std::swap(u, v);
    }
    int k = dep[v] - dep[u];
    for (int i = 0; k; ++i, k >>= 1){
        if (k & 1) {
            v = anc[i][v];
        }
    }
    if (u == v) return u;
    for (int i = log_N - 1; ~i; --i) {
        if (anc[i][u] == anc[i][v]) continue;
        u = anc[i][u];
        v = anc[i][v];
    }
    return anc[0][u];
}

inline int dis(int u, int v) {
    return dep[u] + dep[v] - 2 * dep[lca(u, v)];
}

int main() {
    freopen("output.txt", "w", stdout);
    readInt(h), readInt(w);
    readLine();
    for (int i = 1; i <= h; ++i) {
        string s = readLine();
        puts(s.c_str());
        for (int j = 1; j <= w; ++j) {
            if (s[2 * j - 1] == ' ') {
                add_edge(get_id(i, j), get_id(i + 1, j));
            }
        }
        for (int j = 1; j <= w - 1; ++j) {
            if (s[2 * j] == ' ') {
                add_edge(get_id(i, j), get_id(i, j + 1));
            }
        }
    }
    dfs(1);
    long long ans = 1;
    scanf("%d", &n);
    for (int i = 1; i <= n; ++i) {
        readInt(p[i]);
        if (i > 1) {
            ans += dis(p[i], p[i - 1]) + 1;
        }
    }
    printf("%lld\n", ans);
}
```