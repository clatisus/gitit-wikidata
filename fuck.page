```c++
#include <bits/stdc++.h>

using PII = std::pair<int, int>;

const int max_N = (int)2e5 + 21;

const int inf = 0x3f3f3f3f;

int n, m, k;

int ql, qr;

PII qa;

#define ls(x) ((x) << 1)
#define rs(x) (ls(x) | 1)
#define mid ((l + r) >> 1)
#define lch ls(x), l, mid
#define rch rs(x), mid + 1, r

PII seg[max_N << 2];

void update(PII &x, const PII& y) {
    if (x.first == -1 && x.second == -1) {
        x = y;
        return;
    }
    if (x.first == inf && x.second == inf) {
        return;
    }
    if (y.first == -1 && y.second == -1) {
        return;
    }
    if (x.second + 1 == y.first) {
        x.second = y.second;
    } else {
        x = {inf, inf};
    }
}

inline void down(int x) {
    update(seg[ls(x)], seg[x]);
    update(seg[rs(x)], seg[x]);
    seg[x] = {-1, -1};
}

void modify(int x = 1, int l = 1, int r = n) {
    if (seg[x].first == inf && seg[x].second == inf) {
        return;
    }
    if (ql <= l && r <= qr) {
        update(seg[x], qa);
    } else {
       down(x);
       if (ql <= mid) modify(lch);
       if (qr >  mid) modify(rch);
    }
}

int ans;

void query(int x = 1, int l = 1, int r = n) {
    if (seg[x].first == inf && seg[x].second == inf) {
        return;
    }
    if (l == r) {
        ans += seg[x].first == 1 && seg[x].second == k;
        return;
    }
    down(x);
    query(lch);
    query(rch);
}

int main() {
    memset(seg, -1, sizeof seg);
    scanf("%d%d%d", &n, &k, &m);
    for (int i = 1, x; i <= m; ++i) {
        scanf("%d%d%d", &ql, &qr, &x);
        qa = {x, x};
        modify();
    }
    query();
    printf("%d\n", ans);
}
```