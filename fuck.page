```c++
#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <cstring>
#include <queue>
#include <map>

std::queue<int> deck[2];
std::vector<int> hand[2], field[2], grave[2];
// 0, 1, 2, 3, 4
// P, S, M, I, F
int play_rank[5] = {
        1, 0, 2, 4, 3
        // S, P, M, F, I
};
int discard_rank[5] = {
        2, 3, 1, 0, 4
        // I, M, P, S, F
};
int destroy_rank[5] = {
        3, 4, 2, 1, 0
        // F, I, M, P, S
};
int recycle_rank[5] = {
        4, 1, 2, 3, 0
        // F, S, M, I, P
};
bool has_effect[5] = {
        true, true, true, false, true
};

// high 0
// medium 1
// low 2
int get_priority(int card, int role) {
    bool same = false;
    for (auto i : field[role]) {
        if (i == card) {
            same = true;
            break;
        }
    }
    if (same) return 2;
    if (has_effect[card]) return 0;
    return 1;
}

bool run(int role) {
    // draw phase
    if (!deck[role].empty()) {
        hand[role].push_back(deck[role].front());
        deck[role].pop();
    }
    // main phase

    // play strategy
    if (hand[role].empty()) return false;

    int pri[5] = {0};
    for (int i = 0; i < 4; ++i) {
        pri[i] = get_priority(i, role);
    }
    std::sort(hand[role].begin(), hand[role].end(), [&](const int &i, const int &j) {
        if (pri[i] != pri[j]) return pri[i] < pri[j];
        return play_rank[i] < play_rank[j];
    });
    
    if (pri[hand[role][0]] == 2) {
        return false;
    }

    // end phase
}

bool check_draw() {
    return false;
}

int main() {
    int T;
    scanf("%d", &T);

    for (int cs = 1; cs <= T; ++cs) {
        for (int i = 1; i <= 25; ++i) {
            int card;
            scanf("%d", &card);
            if (i <= 5) hand[0].push_back(card);
            else deck[0].push(card);
        }
        for (int i = 1; i <= 25; ++i) {
            int card;
            scanf("%d", &card);
            if (i <= 5) hand[1].push_back(card);
            else deck[1].push(card);
        }
        bool flag = false;
        for (int i = 1; i <= 100; ++i) {
            if (run(0)) {
                printf("Case %d: Alice %d\n", cs, i);
                flag = true;
                break;
            }
            if (run(1)) {
                printf("Case %d: Bob %d\n", cs, i);
                flag = true;
                break;
            }
            if (check_draw()) {
                printf("Case %d: Draw %d\n", cs, i);
                flag = true;
                break;
            }
        }
        if (!flag) {
            printf("Case %d: Draw 100\n", cs);
        }
    }
    return 0;
}

```