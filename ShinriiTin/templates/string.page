# Manacher
```c++
//indexed from 1
template<size_t size>
struct Manacher{
	//type:ODD 0,EVEN 1
	//define the center of even string as the left one
	int r[2][size];
	template<typename T>
	inline void manacher(T S,int len,int type){
		register int i,j,k;
		int*R=r[type];
		for(i=1,j=0;i<=len;i+=k,j=std::min(j-k,0)){
			while(i-j>0&&i+j+type<len&&S[i-j]!=S[i+j+type])++j;
			R[i]=j;
			for(k=1;k<j&&R[i-k]!=R[i]-k;++k)R[i+k]=std::min(R[i-k],R[i]-k);
		}
	}
};
/*
//indexed from 0
template<size_t size>
struct Manacher{
	//type:ODD 0,EVEN 1
	//define the center of even string as the left one
	int r[2][size];
	template<typename T>
	inline void manacher(T S,int len,int type){
		register int i,j,k;
		int*R=r[type];
		for(i=j=0;i<len;i+=k,j=std::min(j-k,0)){
			while(i-j>=0&&i+j+type<len&&S[i-j]!=S[i+j+type])++j;
			R[i]=j;
			for(k=1;k<j&&R[i-k]!=R[i]-k;++k)R[i+k]=std::min(R[i-k],R[i]-k);
		}
	}
};
*/
```

# Kmp
```c++
//indexed from 1
template<size_t size>
struct Kmp{
	int fail[size];
	template<typename T>
	inline void get_fail(T S,int len){
		fail[1]=0;
		for(int i=2,j;i<=len;++i){
			for(j=fail[i-1];j&&S[j+1]!=S[i];j=fail[j]);
			fail[i]= S[j+1]==S[i]?++j:0;
		}
	}
	template<typename T>
	inline int match(T A,int lenA,T B,int lenB){
		//count how many times does B appears in A
		get_fail(B,lenB);
		int res=0;
		for(int i=1,j=0;i<=lenA;++i){
			while(j&&B[j+1]!=A[i])j=fail[j];
			if(B[j+1]==A[i])++j;
			if(j==lenB)++res,j=fail[j];
		}
		return res;
	}
};
/*
//indexed from 0
template<size_t size>
struct Kmp{
	int fail[size];
	template<typename T>
	inline void get_fail(T S,int len){
		fail[0]=-1;
		for(int i=1,j;i<len;++i){
			for(j=fail[i-1];~j&&S[j+1]!=S[i];j=fail[j]);
			fail[i]= S[j+1]==S[i]?++j:-1;
		}
	}
	template<typename T>
	inline int match(T A,int lenA,T B,int lenB){
		//count how many times does B appears in A
		get_fail(B,lenB);
		int res=0;
		for(int i=0,j=-1;i<lenA;++i){
			while(~j&&B[j+1]!=A[i])j=fail[j];
			if(B[j+1]==A[i])++j;
			if(j==lenB-1)++res,j=fail[j];
		}
		return res;
	}
};
*/
```