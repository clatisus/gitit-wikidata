字符串$S[1\cdots n]$，$sa[1]\cdots sa[n]$表示排名第$k$小的后缀$s[sa[k]\cdots n]$。

```c++
namespace SuffixArray{
	int sa[max_N];
	int tmp[max_N],cnt[max_N],bc[max_N];
	inline void build(char*s,int n){
		register int i,T,sigma;
		for(i=1;i<=n;++i)sa[i]=i;
		std::sort(sa+1,sa+1+n,[&](int a,int b){return s[a]<s[b];});
		for(i=2,bc[sa[1]]=1;i<=n;++i)bc[sa[i]]=bc[sa[i-1]]+(s[sa[i-1]]<s[sa[i]]);
		for(T=1;(sigma=bc[sa[n]])<n;T<<=1){
			auto cmp=[&s,&T,&n](const int&a,const int&b){
				if(bc[a]!=bc[b])return bc[a]<bc[b];
				return (a+T>n||b+T>n)?a>b:bc[a+T]<bc[b+T];
			};
			for(i=0;i<=sigma;++i)cnt[i]=0;
			for(i=1;i<=n;++i)++cnt[(i+T>n)?0:bc[i+T]];
			for(i=1;i<=sigma;++i)cnt[i]+=cnt[i-1];
			for(i=n;i;--i)tmp[cnt[(sa[i]+T>n)?0:bc[sa[i]+T]]--]=sa[i];
			for(i=0;i<=sigma;++i)cnt[i]=0;
			for(i=1;i<=n;++i)++cnt[bc[i]];
			for(i=1;i<=sigma;++i)cnt[i]+=cnt[i-1];
			for(i=n;i;--i)sa[cnt[bc[tmp[i]]]--]=tmp[i];
			for(i=2,tmp[sa[1]]=1;i<=n;++i)tmp[sa[i]]=tmp[sa[i-1]]+cmp(sa[i-1],sa[i]);
			memcpy(bc+1,tmp+1,sizeof(int)*n);
		}
	}
};
```

字符串$S[0\cdots n-1]$，$sa[0]\cdots sa[n-1]$表示排名第$k+1$小的后缀$s[sa[k]\cdots n-1]$。

```c++
namespace SuffixArray{
	int sa[max_N];
	int tmp[max_N],cnt[max_N],bc[max_N];
	inline void build(char*s,int n){
		register int i,T,sigma;
		for(i=0;i<n;++i)sa[i]=i;
		std::sort(sa,sa+n,[&](int a,int b){return s[a]<s[b];});
		for(i=1,bc[sa[0]]=1;i<n;++i)bc[sa[i]]=bc[sa[i-1]]+(s[sa[i-1]]<s[sa[i]]);
		for(T=1;(sigma=bc[sa[n-1]])<n;T<<=1){
			auto cmp=[&s,&T,&n](const int&a,const int&b){
				if(bc[a]!=bc[b])return bc[a]<bc[b];
				return (a+T>=n||b+T>=n)?a>b:bc[a+T]<bc[b+T];
			};
			for(i=0;i<=sigma;++i)cnt[i]=0;
			for(i=0;i<n;++i)++cnt[(i+T>=n)?0:bc[i+T]];
			for(i=1;i<=sigma;++i)cnt[i]+=cnt[i-1];
			for(i=n-1;~i;--i)tmp[--cnt[(sa[i]+T>=n)?0:bc[sa[i]+T]]]=sa[i];
			for(i=0;i<=sigma;++i)cnt[i]=0;
			for(i=0;i<n;++i)++cnt[bc[i]];
			for(i=1;i<=sigma;++i)cnt[i]+=cnt[i-1];
			for(i=n-1;~i;--i)sa[--cnt[bc[tmp[i]]]]=tmp[i];
			for(i=1,tmp[sa[0]]=1;i<n;++i)tmp[sa[i]]=tmp[sa[i-1]]+cmp(sa[i-1],sa[i]);
			memcpy(bc,tmp,sizeof(int)*n);
		}
	}
};
```