# [AtCoder Grand Contest 003](https://agc003.contest.atcoder.jp)

## [A - Wanna go back home](https://agc003.contest.atcoder.jp/tasks/agc003_a)

**题目大意：**

`Snuke`在无限大的二维坐标平面上从原点出发，进行了$n\le1000$的旅行，已知每天旅行的方向（为东南西北四个方向之一），但距离是任意的，问是否存在一种方案使得最后一天旅行后恰好回到原点。

**题解：**

显然不能回去当且仅当某个方向的旅行存在而其反方向的旅行不存在。

```c++
#include <bits/stdc++.h>

const int max_N = 1e3 + 21;

int n;

bool vis[4];

char s[max_N];

int main(){
	scanf("%s",s);
	n=strlen(s);
	for(int i=0;i<n;++i){
		switch(s[i]){
			case('N'): vis[0]=1; break;	
			case('S'): vis[1]=1; break;
			case('E'): vis[2]=1; break;
			case('W'): vis[3]=1; break;
		}
	}
	if((vis[0]^vis[1])||(vis[2]^vis[3]))puts("No");
	else puts("Yes");
	return 0;
}
```

## [B - Simplified mahjong](https://agc003.contest.atcoder.jp/tasks/agc003_b)

**题目大意：**

有$n\le10^5$种不同的卡片，第$i$种卡片有$0\le a_i\le10^9$张。

第$i$种卡片可以和第$i-1,i,i+1$种卡片之一配对，问最多可以配出多少对。

**题解：**

因为自己可以和自己配对，所以就是要尽可能多的解决掉奇数卡片。

形如`奇奇`，`奇偶奇`，`奇偶偶奇`这样的连续卡片可以完美配对（要求偶数不为零）。

按上面的策略从左往右贪心配对即可，时间复杂度$O(n)$。

```c++
#include <bits/stdc++.h>

using ll = long long;

const int max_N = 1e5 + 21;

int n,A[max_N];

ll ans;

int main(){
	scanf("%d",&n);
	for(int i=1;i<=n;++i)scanf("%d",A+i);
	for(int i=1,j;i<=n;++i){
		if(A[i]&1){
			for(j=i+1;j<=n&&A[j]>=2&&(~A[j]&1);++j);
			if(A[j]&1){
				ll tmp=0;
				for(int k=i;k<=j;++k)tmp+=A[k];
				ans+=(tmp>>1);
				i=j;
			}
			else ans+=(A[i]>>1);
		}
		else ans+=(A[i]>>1);
	}
	printf("%lld\n",ans);
	return 0;
}
```

## [C - BBuBBBlesort!](https://agc003.contest.atcoder.jp/tasks/agc003_c)

**题目大意：**

给出一个长度为$n\le10^5$的整数数列$a$，数列中的数两两不同，要用以下两种操作将其排序为升序：

- 交换相邻的两个位置（$A_i,A_{i+1}$）

- 交换相隔一个位置的两个位置（$A_i,A_{i+2}$）

求至少要用到多少次第一种操作。

**题解：**

第二种操作可以做到不改变位置奇偶性的任意交换，但是要改变奇偶性必须用到第一种操作。

因此设排序前后位置奇偶性改变的数有$k$个，则答案为$k/2$。

显然$k$为偶数，因此，可以用第二种操作使其交换到两两相邻，再用$k/2$次第一种操作即可。

时间复杂度为排序复杂度$O(n\log{n}$.

```c++
#include <bits/stdc++.h>

const int max_N = 1e5 + 21;

int n,ans;

std::pair<int,int>A[max_N];

int main(){
	scanf("%d",&n);
	for(int i=1,a;i<=n;++i){
		scanf("%d",&a);
		A[i]={a,i};
	}
	std::sort(A+1,A+1+n);
	for(int i=1;i<=n;++i)
		if((i^A[i].second)&1)++ans;
	printf("%d\n",ans>>1);
	return 0;
}
```