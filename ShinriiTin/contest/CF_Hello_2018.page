# [Hello 2018](http://codeforces.com/contest/913)

##[A. Modular Exponentiation](http://codeforces.com/contest/913/problem/A) 

签到题，输出 $m \mod{2^n}$，m%pow(2.0,n) 居然`hack`不了。

##[B. Christmas Spruce](http://codeforces.com/contest/913/problem/B)

签到题，判断一棵有根树是否满足所有的非叶子节点都有至少3个叶子节点与它直接相连。

##[C. Party Lemonade](http://codeforces.com/contest/913/problem/C)

**题目大意：**

有$n\le30$种不同的物品，第$i$种物品的价值为$2^{i-1}$，花费为$1\le c_i\le10^9$。每种物品的数量可以认为是无穷的。
问要得到价值和至少为$1\le L\le10^9$的物品，最小的花费是多少？

**题解：**

令$f[i]$表示得到少价值和至为$2^i$的物品所需要的最小花费，则有$f[i] = \min(2\times f[i-1],c[i+1])$。

做完之后再用$f[i] = \min(f[i], f[i-1])$更新一次。

之后就递归计算最小花费$G(L)$:

- 如果$L\ge 2^{n-1}$，则$G(L) = f[n-1]\times \lfloor \frac{L}{2^{n-1}} \rfloor + G(L \mod{2^{n-1}})$

- 如果 $L = 2^{k}, 0\le k \le n-2$，则 $G(L) = f[k]$

- 如果以上两条都不满足， $2^k< L < 2^{k+1}$，则 $G(L) = \min(f[k+1],f[k] + G(L - 2^k))$

时间复杂度 $O(n)$

```c++
#include <bits/stdc++.h>

template<typename T>inline void read(T&x){
	register int f,c; f=1; 
	while(!isdigit(c=getchar()))if(c=='-')f=-1;
	for(x=c-48;isdigit(c=getchar());x=x*10+c-48);
	x*=f;
}

using ll = long long;

const int max_N = 40;

int n,L,c[max_N];

ll f[max_N];

inline ll calc(int x){
	if(!x)return 0;
	if(x>=(1<<(n-1))){
		return f[n-1]*(x/(1<<(n-1)))+calc(x%(1<<(n-1)));
	}
	int i=0; while((1<<i)<x)++i;
	if((1<<i)==x)return f[i];
	return std::min(f[i],f[i-1]+calc(x-(1<<(i-1))));
}

int main(){
	scanf("%d%d",&n,&L);
	for(int i=0;i<n;++i){
		scanf("%d",c+i);
		f[i]=c[i];
		if(i)f[i]=std::min(f[i],f[i-1]<<1);
	}
	for(int i=n-2;~i;--i)f[i]=std::min(f[i],f[i+1]);
	printf("%I64d\n",calc(L));
	return 0;
}
```

##[D. Too Easy Problems](http://codeforces.com/contest/913/problem/D)

**题目大意：**

一场考试有$1\le n\le2\times10^5$道题目，总时间为$1\le T\le10^9$。

做第$i$道题目需要$1\le t_i\le40000$的时间，并且如果这场考试一共做完了$k$道（包括此题）题目，那么第$i$道题目对总分贡献一分，当且仅当$k\le a_i$。

问这场考试最多能得多少分？并输出任意一种使得分最多的做题方案。

**题解：**

显然可以二分答案，然后判定的时候将所有 $a_i$ 大于等于当前二分的答案的题都拿出来，按 $t_i$ 从小到大做，看最多能做多少道，如果大于当前二分的答案，就可以接受当前的答案。

时间复杂度$O(n\log{n}+\max t_i \log{n})$

```c++
#include <bits/stdc++.h>

template<typename T>inline void read(T&x){
	register int f,c; f=1; 
	while(!isdigit(c=getchar()))if(c=='-')f=-1;
	for(x=c-48;isdigit(c=getchar());x=x*10+c-48);
	x*=f;
}

const int max_N = 2e5 + 21;

int n,T,max_T;

int a[max_N],t[max_N];

int cnt[max_N+21];

inline bool check(int x){
	for(int i=1;i<=max_T;++i)cnt[i]=0;
	if(x>n)return 0;
	for(int i=1;i<=n;++i)
		if(a[i]>=x){
			++cnt[t[i]];
		}
	int res=0,sum=0;
	for(int i=1;i<=max_T;++i)
		while(cnt[i]){
			if((sum+=i)>T){
				return res>=x;
			}
			++res,--cnt[i];
		}
	return res>=x;
}

int tmp[max_N],tot;

inline void display(int x){
	if(!x){
		puts("");
		return;
	}
	for(int i=1;i<=n;++i)
		if(a[i]>=x){
			tmp[++tot]=i;
		}
	std::sort(tmp+1,tmp+1+tot,[&](int x,int y){return t[x]<t[y];});
	for(int i=1;i<=x;++i){
		printf("%d%c",tmp[i]," \n"[i==x]);
	}
}

int main(){
	read(n),read(T);
	for(int i=1;i<=n;++i){
		read(a[i]),read(t[i]);
		max_T=std::max(max_T,t[i]);
	}
	int l=1,r=n+1;
	while(l<r){
		int mid=(l+r)>>1;
		if(check(mid))l=mid+1;
		else r=mid;
	}
	printf("%d\n%d\n",l-1,l-1);
	display(l-1);
	return 0;
}
```

##[E. Logical Expression](http://codeforces.com/contest/913/problem/E)

**题目大意：**

$1\le n\le 10000$组询问，每组给出逻辑真值函数$f(x,y,z)$的真值表，要求输出$f$的长度最短的表达式，在长度相同时，取字典序最小的。

**题解：**

用$dp[set][a]$表示真值表为 $set$，优先级为 $a$ 的最优表达式。

- 优先级为0，表示可以不加括号直接加 NOT(!)，AND(&)，OR(|)

- 优先级为1，表示可以不加括号直接加 AND(&)，OR(|)

- 优先级为2，表示可以不加括号直接加 OR(|)

然后用spfa去做dp，三个原子公式$x$，$y$，$z$是起点。

松弛的方法大致有三种，在当前表达式前面加 NOT，用 AND 连接当前表达式与另一表达式，以及用 OR 连接当前表达式与另一表达式。

时间复杂度$O(\text{跑挺快的})$

```c++
#include <bits/stdc++.h>

using String = std::string;

inline bool cmp(const String&a,const String&b){
	if(a == "" || b == "")return b == "";
	if(a.length()!=b.length())return a.length()<b.length();
	return a < b;
}

String dp[256][3]; 

//0 can add ! & | without ()
//1 can add & | without ()
//2 can add | without ()

bool vis[256][3];

std::queue<int> queue;

inline void relax(int set,int a,const String&str){
	if(!cmp(str,dp[set][a]))return;
	dp[set][a] = str;
	if(vis[set][a])return;
	queue.push(set*3+a);
	vis[set][a] = 1;
}

inline void spfa(){
	dp[15][0] = "x"; queue.push(15*3); vis[15][0] = 1;
	dp[51][0] = "y"; queue.push(51*3); vis[51][0] = 1;
	dp[85][0] = "z"; queue.push(85*3); vis[85][0] = 1;
	while(!queue.empty()){
		int mask = queue.front();
		int set = mask/3, a = mask%3;
		int n_set, n_a;
		String str = dp[set][a], str1, n_str;
		//add !
		if (!a)
			n_str = "!" + str;
		else
			n_str = "!(" + str + ")";
		n_set = set ^ ((1<<8)-1);
		n_a = 0;
		relax(n_set, n_a, n_str);
		//add &
		for(int s1=0;s1<256;++s1)
			for(int a1=0;a1<3;++a1){
				if((str1 = dp[s1][a1]) == "")
					continue;
				n_set = set & s1;
				n_a = 1;
				String tmp1 = (a<=1? str: "(" + str + ")") + "&" + (a1<=1? str1: "(" + str1 + ")");
				String tmp2 = (a1<=1? str1: "(" + str1 + ")") + "&" + (a<=1? str: "(" + str + ")");
				n_str = cmp(tmp1,tmp2)? tmp1: tmp2;
				relax(n_set, n_a, n_str);
			}
		//add |
		for(int s1=0;s1<256;++s1)
			for(int a1=0;a1<3;++a1){
				if((str1 = dp[s1][a1]) == "")
					continue;
				n_set = set | s1;
				n_a = 2;
				String tmp1 = str + "|" + str1;
				String tmp2 = str1 + "|" + str;
				n_str = cmp(tmp1,tmp2)? tmp1: tmp2;
				relax(n_set, n_a, n_str);
			}
		queue.pop(); vis[set][a] = 0;
	}
}

String ans[256];

inline void init(){
	spfa();
	/*
	freopen("data.txt","w",stdout);
	for(int i=0;i<256;++i){
		String ans;
		for(int j=0;j<3;++j)
			if(cmp(dp[i][j],ans)){
				ans = dp[i][j];
			}
		printf("\"%s\"%c\n",ans.c_str(),",\n"[i==255]);
	}
	*/
	for(int i=0;i<256;++i){
		String tmp;
		for(int j=0;j<3;++j)
			if(cmp(dp[i][j],tmp)){
				tmp = dp[i][j];
			}
		ans[i] = tmp;
	}
}

int main(){
	init();
	int T;
	scanf("%d",&T);
	while(T--){
		int tmp,mask=0;
		scanf("%d",&tmp);
		for(int i=0;i<8;++i,tmp/=10){
			if(tmp&1)mask|=(1<<i);
		}
		printf("%s\n",ans[mask].c_str());
	}
	return 0;
}
```
