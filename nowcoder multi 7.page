# Contest Info

date: 2018.08.09 12:00-17:00

[practice link](https://www.nowcoder.com/acm/contest/145#question)

# Solutions
## C. Bit Compression

**题目大意**：给你一个长为 $2^{n}$ 的 $01$ 串，有 $\vee \wedge \oplus$ 三种运算符，每次选取一种运算符，将 $2i-1$ 和 $2i$ 处的字符进行运算得到一个新串。问 $3^{n}$ 种不同的选法中有多少使得最后结果为 $1$。

**题解**：我们先将原序列蝴蝶变换，那么每次的运算就变成了将前一半和后一半进行运算，于是就可以用手写压位优化了。我们对前 $n-4$ 步暴力枚举，后面 $4$ 步不同的状态至多有 $2^{2^{4}}$，可以 dp 解决。时间复杂度 $\displaystyle \mathcal{O}(\frac{3^{n-4}\cdot 2^{4}}{32}+2^{2^{4}})$。

## D. Inverse Inverse Problem

**题目大意**：定义 $f(x)=ax+b$，$f^{n}(x)=f(f(f(\cdots f(x)\cdots))$。定义 $g(x,n,t,p)$ 为满足 $f^{n}(x)\equiv t\pmod{p}$ 的最小的 $a$，如果不存在设为 $-1$。给出 $m$，求出一组 $(x,n,t,p)(0\leq t<p\le m)$ ，$p$ 是质数，且使得 $g(x,n,t,p)$ 最大。

**题解**：易得
$$
f^{n}(x)=\begin{cases}
&x+nb&(a=1)\\
&\displaystyle a^{n}x+\frac{1-a^{n}}{1-a}\cdot b&(a>1)
\end{cases}
$$
考虑 $a=1$ 的情况，$x+nb\equiv t\pmod{p}$ 中 $b$ 无解的充要条件是 $n\equiv0\pmod{p}$ 且 $x\not \equiv t\pmod{p}$。要使 $g$ 尽可能大，就不能让 $a$ 取到 $1$。所以我们希望 $b$ 无解，构造 $p\mid n,x\not\equiv t\pmod{p}$。

考虑 $a>1$ 的情况，$\displaystyle a^{n}x+\frac{1-a^{n}}{1-a}\cdot b\equiv t\pmod{p}$ 中 $b$ 无解的充要条件是 $1-a^{n}\equiv0\pmod{p}$ 且 $t-a^{n}x\not \equiv0\pmod{p}$。要使 $g$ 尽可能大，就要使 $a=2,3,\cdots$ 时尽可能多地连续地无解。无解的充要条件即为 $a^{n}\equiv1\pmod{p}$ 且 $x\not\equiv t\pmod{p}$。注意到 $n$ 不能是 $p-1$ 的倍数，否则答案不够优。

这里，在比赛时我猜测 $n\equiv\frac{p-1}{2}\pmod{(p-1)}$ 时答案最大，事实上也能通过。由于 $n\equiv\frac{p-1}{2}\pmod{(p-1)}$ 时满足 $a^{n}\equiv 1\pmod{p}$ 的 $a$ 最多，有 $\frac{p-1}{2}$ 个（但是不一定从 $2$ 开始连续出现），因此这个猜测是有一定道理的，但是我不会证明，不知道是不是巧合。下面叙述题解的做法。

$a^{n}\equiv1\pmod{p}$ 等价于 $\delta_{p}(a)\mid n$，因此我们就是要求出最大的 $a$，使得 $\text{lcm}(\delta_{p}(2),\cdots,\delta_{p}(a))=n$ 小于 $p-1$。注意到若 $a$ 是 $p$ 的原根，那么 $\delta_{p}(a)$ 等于 $p-1$，而 $p$ 的原根有 $\varphi(\varphi(p))$ 个，因此暴力枚举的复杂度也不会很高。

## F. Mindiff and Maxdiff

**题目大意**：对于一个集合，定义 $\text{maxdiff}$ 和 $\text{mindiff}$ 分别为该集合中元素差的绝对值的最大/最小值。求 $S=\{1,\cdots,n\}$ 的所有子集的 $\text{maxdiff}\times\text{mindiff}$ 的和。

**题解**：枚举 $d$，求 $\text{mindiff}\ge d$ 的所有子集的 $\text{maxdiff}$ 的和，之后我们就可以容斥解决。记 $\text{maxdiff}=x$。枚举集合大小 $k$，对于一个 $x$，容易知道满足要求的子集个数为 $(n-x){x-(k-1)(d-1)-1\choose k-2}$，对答案的贡献为 $x(n-x){x-(k-1)(d-1)-1\choose k-2}$。注意到使得组合数不为 $0$ 的 $d$ 和 $k$ 的取值只有 $\mathcal{O}(n\log n)$ 种，我们现在只需要 $\mathcal{O}(1)$ 求出 $\sum_{x=1}^{n-1}x(n-x){x-(k-1)(d-1)-1\choose k-2}$ 即可，这是很容易的。记 $(k-1)(d-1)+1=t$，我们将 $x(n-x)$ 用 $(x-t+1)(x-t+2)$，$x-t+1$ 和 $1$ 表示，以 $(x-t+1)(x-t+2)$ 项的系数为 $a_{2}$ 为例，有：
$$
\begin{aligned}
&\sum_{x=1}^{n-1}a_{2}k(k-1){x-t+2\choose k}\\
=&a_{2}k(k-1)({n-1-t+2+1\choose k+1}-{1-t+2\choose k+1})
\end{aligned}
$$
一次项和常数项以此类推。

时间复杂度 $\mathcal{O}(n\log n)$。

~~组合数学怎么及格的？~~

# Dirt Replay

C: `-3` 代码写错；手写压位操作写错；抄 ntt 的蝴蝶操作用错了变量

E: `-4` 构造不够优秀，应该本地 checker 后台跑一会儿